weather.html<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <meta http-equiv="X-UA-Compatible" content="IE=edge">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>Weather app</title>
   
    <link rel="stylesheet" href="style.css">
    <link rel="javascript" href="script.js">
    <style>
        @import url('https://fonts.googleapis.com/css2?family=Roboto&family=Ubuntu:wght@300&display=swap');

body{
  background-image: url(bg.jpg);
}

.header h4 {
  color: #da1e4e;
  font-weight: 700;
  font-size: 2.4rem;
  font-family: Cambria, Cochin, Georgia, Times, "Times New Roman", serif;
}

.app-main {
  min-height: 10vh;
  width: 30vw;
  margin: 50px auto;
  padding: 20px;
  text-align: center;
  box-shadow: rgba(60, 64, 67, 0.3) 0px 1px 2px 0px, rgba(60, 64, 67, 0.15) 0px 2px 6px 2px;
  border-radius: 15px;
  background: #c0dfec;
  background: -webkit-linear-gradient(to top, #92fe9d, #c0dfec);
  background: linear-gradient(to top, #92fe9d, #c0dfec);
}

.app-main > * {
  margin-bottom: 20px;
}

.input-box {
  width: 100%;
  background: azure;
  color: #e4603a;
  font-weight: 500;
  border: none;
  font-size: 1.7rem;
  border-radius: 10px;
  padding: 10px;
  text-align: center;
  outline: none;
}

.weather-body {
  color: #fff;
  padding: 20px;
  line-height: 2rem;
  border-radius: 10px;
  background-color: #eff1f3;
  display: none;
  background: linear-gradient(to top, #da1e4e, #e4603a);
}

@media screen and (max-width: 800px) {
  .app-main {
    width: 95%;
    padding: 10px;
  }
  body {
    min-height: 94vh;
  }
}

    </style>
    
</head>
<body>
    <div class="app-main">
        <div class="header">
            <h4>Get Weather</h4>
        </div>
        <div class="searchInputBox">
            <input type="text" id="input-box" class="input-box" placeholder="Enter city name">
        </div>
        <div class="weather-body" id="weather-body"></div>
    </div>
   <script>
    const weatherApi = {
    key: '4eb3703790b356562054106543b748b2',
    baseUrl: 'https://api.openweathermap.org/data/2.5/weather'
  };
  
  const searchInputBox = document.getElementById('input-box');
  
  searchInputBox.addEventListener('keypress', (event) => {
    if (event.key === 'Enter') {
      const city = searchInputBox.value.trim();
      if (city !== '') {
        getWeatherReport(city);
      } else {
        alert('Please enter a city name.');
      }
    }
  });
  
  function getWeatherReport(city) {
    fetch(`${weatherApi.baseUrl}?q=${city}&appid=${weatherApi.key}&units=metric`)
      .then(response => {
        if (!response.ok) {
          throw new Error('City not found');
        }
        return response.json();
      })
      .then(showWeatherReport)
      .catch(error => {
        alert(error.message);
      });
  }
  
  function showWeatherReport(weather) {
    const weatherBody = document.getElementById('weather-body');
    weatherBody.innerHTML = `
      <div class="location-details">
        <div class="city">${weather.name}, ${weather.sys.country}</div>
        <div class="date">${getDate(new Date())}</div>
      </div>
      <div class="weather-status">
        <div class="temp">${Math.round(weather.main.temp)}&deg;C</div>
        <div class="weather">${weather.weather[0].main} <i class="${getIconClass(weather.weather[0].main)}"></i></div>
        <div class="min-max">${Math.floor(weather.main.temp_min)}&deg;C (min) / ${Math.ceil(weather.main.temp_max)}&deg;C (max)</div>
        <div class="updated-on">Updated as of ${getTime(new Date())}</div>
      </div>
      <hr>
      <div class="day-details">
        <div class="basic">Feels like ${weather.main.feels_like}&deg;C | Humidity ${weather.main.humidity}% <br> Pressure ${weather.main.pressure} mb | Wind ${weather.wind.speed} KMPH</div>
      </div>
    `;
    weatherBody.style.display = 'block';
    changeBg(weather.weather[0].main);
  }
  
  function getDate(date) {
    const days = ['Sunday', 'Monday', 'Tuesday', 'Wednesday', 'Thursday', 'Friday', 'Saturday'];
    const months = ['January', 'February', 'March', 'April', 'May', 'June', 'July', 'August', 'September', 'October', 'November', 'December'];
  
    const year = date.getFullYear();
    const month = months[date.getMonth()];
    const day = days[date.getDay()];
    const dayOfMonth = date.getDate();
    
    return `${dayOfMonth} ${month} (${day}), ${year}`;
  }
  
  function getTime(date) {
    const hour = addZero(date.getHours());
    const minute = addZero(date.getMinutes());
    return `${hour}:${minute}`;
  }
  
  function addZero(number) {
    return number < 10 ? '0' + number : number;
  }
  
  function getIconClass(weatherCondition) {
    switch (weatherCondition) {
      case 'Rain':
        return 'fas fa-cloud-showers-heavy';
      case 'Clouds':
        return 'fas fa-cloud';
      case 'Clear':
        return 'fas fa-sun';
      case 'Snow':
        return 'fas fa-snowflake';
      case 'Mist':
      case 'Smoke':
      case 'Haze':
      case 'Dust':
      case 'Fog':
      case 'Sand':
      case 'Ash':
      case 'Squall':
      case 'Tornado':
        return 'fas fa-smog';
      case 'Thunderstorm':
        return
    }
  }
   </script>
</body>
</html>
